;рекурсивный алгоритм (линейный рост)
(define (mul-r a b)
  (if (= b 0)
      0
      (+ a (mul-r a (- b 1)))))

;итеративный алгоритм (линейный рост)
(define (mul-i x n)
  (define (mul-iter x n sum)
    (if (= n 0) sum
        (mul-iter x (- n 1) (+ sum x))))
  (cond ((or (= x 0) (= n 0)) 0)
        ((= x 1) n)
        ((= n 1) x)
        (else (mul-iter x n 0))))

;рекурсивный алгоритм (логарифмический рост)
(define (fast-mul-r x n)
  (define (double x)(* x 2))
  (cond ((= n 0) 0)
        ((= n 1) x)
        ((even? n)(double (fast-mul-r x (/ n 2))))
        (else (+ x (fast-mul-r x (- n 1))))))

;итеративный алгоритм (логарифмический рост)
(define (fast-mul-i x n)
  (define (double x)(* x 2))
  (define (fast-mul-iter x n sum)
  (cond ((= n 0) sum)
        ((even? n)(fast-mul-iter (double x) (/ n 2) sum))
        (else (fast-mul-iter (double x) (/ (- n 1) 2) (+ sum  x)))))
  (cond ((or (= x 0) (= n 0)) 0)
        ((= x 1) n)
        ((= n 1) x)
        (else (fast-mul-iter x n 0))))